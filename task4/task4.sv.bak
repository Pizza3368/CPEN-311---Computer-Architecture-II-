`timescale 1 ps / 1 ps

`define wait_ready_crack 3'd0
`define start_crack 3'd1
`define wait_crack_finish 3'd2
`define crack_finish 3'd3
`define rand 3'd4

module task4(input logic CLOCK_50, input logic [3:0] KEY, input logic [9:0] SW,
             output logic [6:0] HEX0, output logic [6:0] HEX1, output logic [6:0] HEX2,
             output logic [6:0] HEX3, output logic [6:0] HEX4, output logic [6:0] HEX5,
             output logic [9:0] LEDR);

    // your code here

    reg[7:0] ct_addr;
    reg[7:0] ct_rddata;
    reg ct_wren = 0;
    reg[7:0] ct_wrdata = 0;

    reg en_c;
    reg rdy_c;
    reg[23:0] key;
    reg is_key_valid;

    ct_mem ct(
        .address(ct_addr),
        .clock(CLOCK_50),
        .data(ct_wrdata),
        .wren(ct_wren),
        .q(ct_rddata)
    );

    crack c( 
        .clk(CLOCK_50),
        .rst_n(KEY[3]),
        .en(en_c),
        .rdy(rdy_c),
        .key(key),
        .key_valid(is_key_valid),
        .ct_addr(ct_addr),
        .ct_rddata(ct_rddata)
    );

    reg[2:0] present_state = `rand;
    assign HEX0 = key[3] == 0 ? 7'b0000000 : 7'b1111111;
    /* on reset if rdy_c is 1 then start crack by setting en_c = 1.
    Once enabled never enable again, since we only want it to run once.*/
    always @(posedge CLOCK_50 or negedge KEY[3]) begin 
        if (KEY[3] == 0) begin 
            present_state = `wait_ready_crack;
            en_c = 0;
        end
        else begin 
            case(present_state) 
                `wait_ready_crack: begin 
                    if (rdy_c == 1) begin 
                        present_state = `start_crack;
                    end
                    else begin 
                        present_state = `wait_ready_crack;
                    end
                end

                `start_crack: begin 
                    present_state = `wait_crack_finish;
                end

                `wait_crack_finish: begin 
                    if (rdy_c == 1) begin 
                        present_state = `crack_finish;
                    end
                    else begin 
                        present_state = `wait_crack_finish;
                    end
                end

                `crack_finish: begin 
                    present_state = `crack_finish;
                end

                default: begin present_state = `rand; end
            endcase

            case(present_state) 
                `wait_ready_crack: begin 
                    en_c = 0;
                    LEDR = 10'b1000000000;
                end

                `start_crack: begin 
                    en_c = 1;
                    LEDR = 10'b0100000000;
                end

                `wait_crack_finish: begin 
                    en_c = 0;
                    LEDR = 10'b0010000000;
                end

                `crack_finish: begin 
                    en_c = 0;                    
                    if (is_key_valid == 1) begin 
                        LEDR = 10'b1111111111;
                    end
                    else begin 
                        LEDR = 10'b0000000000;
                    end
                end

                default: begin 
                    HEX1 = 7'b1111111111;
                    en_c = 0;
                end
            endcase
        end
    end

endmodule: task4
